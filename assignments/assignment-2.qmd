---
title: "Assignment 2"
format:
  html:
    code-fold: true
    code-tools: true
---

# (1)

```{r}
#| code-fold: true
url1 <- c("https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=release_date,asc&num_votes=2500,&country_of_origin=TR&count=250")
url2 <- c("https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=release_date,asc&num_votes=2500,&country_of_origin=TR&count=250")
```

# (2)

```{r}
#| code-fold: true
#| output: false
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)


convert_time <- function(time_str) {
  hours <- 0
  minutes <- 0
  
  if (grepl("h", time_str)) {
    time_components <- strsplit(time_str, "h|m")[[1]]
    if (length(time_components) >= 1) {
      hours <- as.numeric(time_components[1])
    }
    if (length(time_components) >= 2) {
      minutes <- as.numeric(time_components[2])
    }
  } else {
    minutes <- as.numeric(gsub("m", "", time_str))
  }
  
  total_minutes <- hours * 60 + minutes
  return(total_minutes)
}

data_html <- read_html(url1)
title_names1 <- data_html %>%
  html_elements(".ipc-title__text") %>%
  html_text()
title_names1 <- tail(head(title_names1,-1),-1)
title_names1 <- str_split(title_names1, " ", n=2)
title_names1 <- unlist(lapply(title_names1, function(x) {x[2]}))

year1 <- data_html %>% 
  html_nodes(".dli-title-metadata-item:nth-child(1)") %>%
  html_text() %>%
  as.numeric()

duration1 <- data_html %>%
  html_elements(".dli-title-metadata-item:nth-child(2)") %>%
  html_text()
duration1 <- unlist(lapply(duration1, convert_time))

rating1 <- data_html %>%
  html_elements(".ratingGroup--imdb-rating") %>%
  html_text()
rating1 <- str_extract(rating1, "\\d+\\.\\d+") %>%
  as.numeric()

votes1 <- data_html %>%
  html_elements(".kRnqtn") %>%
  html_text()
votes1 <- gsub("\\D", "", votes1) %>%
  as.numeric()

#PART URL2

data_html <- read_html(url2)
title_names2 <- data_html %>%
  html_elements(".ipc-title__text") %>%
  html_text()
title_names2 <- tail(head(title_names2,-1),-1)
title_names2 <- str_split(title_names2, " ", n=2)
title_names2 <- unlist(lapply(title_names2, function(x) {x[2]}))

year2 <- data_html %>% 
  html_nodes(".dli-title-metadata-item:nth-child(1)") %>%
  html_text() %>%
  as.numeric()

duration2 <- data_html %>%
  html_elements(".dli-title-metadata-item:nth-child(2)") %>%
  html_text()
duration2 <- unlist(lapply(duration2, convert_time))

rating2 <- data_html %>%
  html_elements(".ratingGroup--imdb-rating") %>%
  html_text()
rating2 <- str_extract(rating2, "\\d+\\.\\d+") %>%
  as.numeric()

votes2 <- data_html %>%
  html_elements(".kRnqtn") %>%
  html_text()
votes2 <- gsub("\\D", "", votes2) %>%
  as.numeric()

title <- c(title_names1,title_names2)
year <- c(year1,year2)
duration <- c(duration1,duration2)
rating <- c(rating1,rating2)
votes <- c(votes1,votes2)

moviedf <- data.frame(
  Title = title,
  Year = year,
  Duration = duration,
  Rating = rating,
  Votes = votes
)
```

# (3)

## Part A

```{r}
#| code-fold: true
movies <- moviedf %>% 
  arrange(desc(Rating))

```

```{r}
#| code-fold: true
kable(
  movies %>%
    arrange(desc(rating)) %>%
    head(5),
  format = "html",
  caption = "Top 5 Movies based on Rating",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)


```

```{r}
#| code-fold: true
kable(movies %>% tail(5), caption = "Bottom 5", col.names = c("Title", "Year", "Duration", "Rating", "Votes"))
```

## Part B

```{r}
#| code-fold: true
kable(moviedf %>% filter(Title == "Recep İvedik 3" | Title == "Eyyvah Eyvah" | Title == "Çok Filim Hareketler Bunlar"), caption = "My Bests", col.names = c("Title", "Year", "Duration", "Rating", "Votes"))
```

## Part C

```{r}
#| code-fold: true
moviedf %>% 
  group_by(Year) %>%
  summarize(avg = mean(Rating)) %>%
  ggplot(aes(x = Year, y = avg)) + geom_point() +
  ggtitle("Yearly Rating Averages")
```

The plot clearly show that ratings decrease over the years.

```{r}
#| code-fold: true
ggplot(moviedf, aes(x = factor(Year))) +
  geom_bar(fill = "yellow", color = "black") +
  ggtitle("Number of Movies Over the Years") +
  labs(x = "Year", y = "Number of Movies") +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 60)
  )
```

```{r}
#| code-fold: true
moviedf$Year <- as.factor(moviedf$Year)
ggplot(moviedf, aes(x = Year, y = Rating, fill = factor(Year))) +
  geom_boxplot(color = "black",width = 0.7) +
  labs(x = "Year", y = "Rating") +
  ggtitle("Box Plots of Movie Ratings") +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 60)
  )
```

## Part D

```{r}
#| code-fold: true
corr <- cor(moviedf$Votes, moviedf$Rating)
cat("Correlation between Votes and Ratings:", corr)
```

The correlation between votes and ratings.

## Part E

```{r}
#| code-fold: true
corr <- cor(moviedf$Duration, moviedf$Rating)
cat("Correlation between Votes and Ratings:", corr)
```

The correlation between duration and ratings.

# (4) Turkish Movies in Top 1000

```{r}
#| code-fold: true
moviedf1 = moviedf
url <- c("https://m.imdb.com/search/title/?title_type=feature&sort=release_date,asc&num_votes=2500,&groups=top_1000&country_of_origin=TR&count=250")

data_html <- read_html(url)
title_names <- data_html %>%
  html_elements(".ipc-title__text") %>%
  html_text()
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))

year <- data_html %>% 
  html_nodes(".dli-title-metadata-item:nth-child(1)") %>%
  html_text() %>%
  as.numeric()

bestmovies <- data.frame(
  Title = title_names,
  Year = year
  )
kable (bestmovies, caption = "Turkish Movies in the Top 1000",format = "simple")
```

```{r}
#| code-fold: true
moviedf <- moviedf %>% mutate(Year = as.numeric(Year))
bestmovies <- bestmovies %>% mutate(Year = as.numeric(Year))

bestmovies2 <- movies %>%
  inner_join(bestmovies, by = c("Title", "Year")) %>%
  arrange(desc(Rating))
kable(bestmovies2, caption = "Turkish Movies in the Top 1000 Full Table", col.names = c("Title", "Year", "Duration", "Rating", "Votes"))
```

```{r}
#| code-fold: true
moviedf1 <- arrange(moviedf1, desc(Rating))

kable(head(moviedf1, 11), caption = "Turkish Movies in the Top 11", col.names = c("Title", "Year", "Duration", "Rating", "Votes"))
```

Upon analyzing the table, it is evident that the top 11 highest-rated movies deviate from those present in our original data frame. A significant contrast is noticeable in the release years of these films, with a conspicuous lack of older productions within the TOP 1000 IMDB list. It is likely that the criteria for inclusion in this list prioritize movies released after a certain year.
